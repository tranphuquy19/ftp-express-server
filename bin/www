#!/usr/bin/env node

/**
 * Config dotenv
 */

var dotenv = require("dotenv");
dotenv.config();

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("ftp-express-server:server");
var http = require("http");
var FTP = require("ftp-srv");
var os = require("os");
var { ftpPort, ftpUsername, ftpPassword } = require("../configs");

var ftpPort_ = normalizePort(ftpPort || 2121);

var ftpServer = new FTP({
  url: `ftp://127.0.0.1:${ftpPort_}`,
  pasv_url: "192.168.1.1",
  pasv_min: 8881,
  greeting: [
    "Welcome",
    "to",
    "the",
    "ftp",
    "express",
    "server!",
    "@tranphuquy19"
  ]
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Config ftp server
 */

ftpServer.on("login", ({ connection, username, password }, resolve, reject) => {
  console.log("You are loggin with", { username, password });
  if (ftpUsername) {
    if (username === ftpUsername && password === ftpPassword) {
      resolve({ root: os.homedir() });
    } else reject("Wrong password!");
  } else {
    if (password === "quydeptroai") {
      resolve({ root: os.homedir() });
    } else reject("Wrong password!");
  }
});

ftpServer.listen().then(() => {
  console.log("FTP server is running");
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
